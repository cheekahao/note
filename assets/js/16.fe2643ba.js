(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{285:function(v,_,e){"use strict";e.r(_);var o=e(10),c=Object(o.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"dsl-domain-specific-language"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dsl-domain-specific-language"}},[v._v("#")]),v._v(" DSL(Domain Specific Language)")]),v._v(" "),_("blockquote",[_("p",[v._v("参考自(https://zhuanlan.zhihu.com/p/107947462)[https://zhuanlan.zhihu.com/p/107947462]")])]),v._v(" "),_("p",[_("code",[v._v("DSL")]),v._v(" 即"),_("code",[v._v("Domain Specific Language")]),v._v("，领域特定语言是一种为特定领域设计的，具有受限表达性的编程语言。")]),v._v(" "),_("p",[v._v("编程语言的发展其实是一个不断抽象的过程，比如从机器语言到汇编语言然后到"),_("code",[v._v("C")]),v._v("之类的高级语言。汇编语言通过助记符代替机器指令操作码，极大的增强了机器语言的可读性和可维护性，但本质上仍是一门面向处理器和寄存器等硬件系统的低级编程语言。高级语言以上层抽象的语句(流程控制、循环等)和数据结构等更趋近自然语言和数学公式的方式解决了这个问题，脱离了对机器指令集的直接关联，大大提升了程序开发的效率。")]),v._v(" "),_("p",[v._v("但在高级语言层面，抽象带来的效率提升似乎有了天花板。无论是从"),_("code",[v._v("C")]),v._v("到"),_("code",[v._v("Java")]),v._v("，抑或是各种编程范式下衍生的抽象度更高的编程语言，解决的都是通用编程问题，它们都有充分的过程抽象和数据抽象，导致大量的概念产生，进而影响了编程效率。")]),v._v(" "),_("p",[v._v("而在一些专有领域的任务处理上其实不需要那么多语言特性，"),_("code",[v._v("DSL")]),v._v("就是在这种矛盾中产生的解决方案。它是为了解决特定任务的语言工具，比如文档编写有"),_("code",[v._v("markdown")]),v._v("，字符串匹配有"),_("code",[v._v("RegExp")]),v._v("，任务控制有 "),_("code",[v._v("make")]),v._v("、"),_("code",[v._v("gradle")]),v._v("，数据查找有"),_("code",[v._v("SQL")]),v._v("，"),_("code",[v._v("Web")]),v._v("样式编码有"),_("code",[v._v("CSS")]),v._v("等等。本质是通过限定问题域边界，从而锁定复杂度，提高编程效率。")]),v._v(" "),_("p",[_("code",[v._v("DSL")]),v._v("有两种不同类型：外部"),_("code",[v._v("DSL")]),v._v("和内部"),_("code",[v._v("DSL")]),v._v("。")]),v._v(" "),_("h2",{attrs:{id:"外部dsl"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#外部dsl"}},[v._v("#")]),v._v(" 外部"),_("code",[v._v("DSL")])]),v._v(" "),_("p",[v._v("**外部"),_("code",[v._v("DSL")]),v._v("**是一种独立的编程语言，需要从解析器开始实现自己的编译工具，实现成本较高。其语法的灵活性更高，更容易达到用户的表现力需求。")]),v._v(" "),_("p",[v._v("外部"),_("code",[v._v("DSL")]),v._v("的直接对应就是"),_("code",[v._v("GPPL")]),v._v("("),_("code",[v._v("General Purpose Programming Language")]),v._v("，通用编程语言)，由于受限语法特性更少，一般不要求图灵完备，所以它实现难度会低于"),_("code",[v._v("GPPL")]),v._v("。")]),v._v(" "),_("p",[v._v("前端常用的模板引擎如"),_("code",[v._v("mustache")]),v._v("以及"),_("code",[v._v("React")]),v._v("、"),_("code",[v._v("Vue")]),v._v("支持的"),_("code",[v._v("JSX")]),v._v("语法都属于外部"),_("code",[v._v("DSL")]),v._v("。")]),v._v(" "),_("h2",{attrs:{id:"内部dsl"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内部dsl"}},[v._v("#")]),v._v(" 内部"),_("code",[v._v("DSL")])]),v._v(" "),_("p",[v._v("**内部"),_("code",[v._v("DSL")]),v._v("（Embedded DSL or Internal DSL）**是建立在其它宿主语言之上（一般为"),_("code",[v._v("GPPL")]),v._v("）的特殊"),_("code",[v._v("DSL")]),v._v("，与宿主语言共享编译与调试工具等基础设施，学习成本更低，也更容易被集成。在语法上与宿主语言同源，但在运行时上需要做额外的封装。")]),v._v(" "),_("p",[v._v("也可以将内部"),_("code",[v._v("DSL")]),v._v("视为针对特定任务的特殊接口封装风格，比如"),_("code",[v._v("jQuery")]),v._v("就可以认为是针对"),_("code",[v._v("DOM")]),v._v("操作的一种内部"),_("code",[v._v("DSL")]),v._v("。")])])}),[],!1,null,null,null);_.default=c.exports}}]);