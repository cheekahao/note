(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{305:function(t,e,v){"use strict";v.r(e);var s=v(10),_=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"typescript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[t._v("#")]),t._v(" TypeScript")]),t._v(" "),e("h2",{attrs:{id:"typescript的设计目标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript的设计目标"}},[t._v("#")]),t._v(" TypeScript的设计目标")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("TypeScript")]),t._v("是一种在编译期进行静态类型分析的强类型语言。拥有一个语言服务层为开发者提供更好的工具。")]),t._v(" "),e("li",[t._v("与"),e("code",[t._v("JavaScript")]),t._v("兼容。"),e("code",[t._v("TypeScript")]),t._v("是"),e("code",[t._v("JavaScript")]),t._v("的超集，任何合法的"),e("code",[t._v("JavaScript")]),t._v("程序都是合法的"),e("code",[t._v("TypeScript")]),t._v("程序。")]),t._v(" "),e("li",[t._v("给大型项目提供一个构建机制，加入了基于类"),e("code",[t._v("Class")]),t._v("的对象、接口和模块。")]),t._v(" "),e("li",[t._v("对于发行版本代码，没有运行时开销。"),e("code",[t._v("TypeScript")]),t._v("程序通常将"),e("strong",[t._v("设计阶段")]),t._v("和"),e("strong",[t._v("运行阶段")]),t._v("分开。"),e("code",[t._v("TypeScript")]),t._v("的新特性仅对"),e("strong",[t._v("设计时代码")]),e("code",[t._v("design time code")]),t._v("有效，而对于"),e("strong",[t._v("执行时代码")]),e("code",[t._v("excution time code")]),t._v("则通过"),e("strong",[t._v("代码转换")]),t._v("（转换为"),e("code",[t._v("JavaScript")]),t._v("代码）和"),e("strong",[t._v("类型擦除")]),t._v("将之转换为纯净的"),e("code",[t._v("JavaScript")]),t._v("代码。")]),t._v(" "),e("li",[t._v("遵循当前以及未来的"),e("code",[t._v("ECMAScript")]),t._v("规范。")]),t._v(" "),e("li",[t._v("开源。")])]),t._v(" "),e("h2",{attrs:{id:"typescript的类型系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript的类型系统"}},[t._v("#")]),t._v(" TypeScript的类型系统")]),t._v(" "),e("p",[e("code",[t._v("TypeScript")]),t._v("为"),e("code",[t._v("JavaScript")]),t._v("增加了可选的静态类型说明，用以约束函数、变量、属性等程序实体。以便编译器和相应的开发工具可以在开发过程中提供更好的正确性校验和帮助提示。")]),t._v(" "),e("p",[e("strong",[t._v("可选的静态类型声明")]),e("code",[t._v("optional static type notation")]),t._v("在变量的后面并且以冒号分隔：")]),t._v(" "),e("div",{staticClass:"language-ts line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" counter                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 未知(any)类型")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" counter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("             "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number类型，类型推导type inference")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" counter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number类型")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" counter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number类型")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h3",{attrs:{id:"js基本类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js基本类型"}},[t._v("#")]),t._v(" JS基本类型")]),t._v(" "),e("p",[e("code",[t._v("JavaScript")]),t._v("的基本类型在"),e("code",[t._v("TypeScript")]),t._v("中都有对应的类型：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("number")])]),t._v(" "),e("li",[e("code",[t._v("string")])]),t._v(" "),e("li",[e("code",[t._v("boolean")])]),t._v(" "),e("li",[e("code",[t._v("symbol")]),t._v("，是"),e("code",[t._v("ES6")]),t._v("新增的数据类型，在编译目标是"),e("code",[t._v("ES5")]),t._v("及以下时会报错。由于只能通过"),e("code",[t._v("Symbol")]),t._v("函数生成，可以通过类型推断确定类型，无需特别声明变量为"),e("code",[t._v("symbol")]),t._v("类型。")]),t._v(" "),e("li",[e("code",[t._v("undefined")]),t._v("和"),e("code",[t._v("null")]),t._v("，是所有其他类型的子类型，可以赋值给任何其他类型的变量。在"),e("code",[t._v("tsconfig")]),t._v("中开启了"),e("code",[t._v("strictNullChecks")]),t._v("，那么"),e("code",[t._v("undefined")]),t._v("和"),e("code",[t._v("null")]),t._v("就只能赋值给"),e("code",[t._v("void")]),t._v("或"),e("code",[t._v("any")]),t._v("类型变量以及它们自身类型的变量。")])]),t._v(" "),e("h3",{attrs:{id:"any类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#any类型"}},[t._v("#")]),t._v(" Any类型")]),t._v(" "),e("p",[e("code",[t._v("any")]),t._v("类型，表示任何"),e("code",[t._v("JavaScript")]),t._v("值。"),e("code",[t._v("any")]),t._v("类型即是类型系统的顶级类型（全局超级类型），又是"),e("code",[t._v("bottom type")]),t._v("（任何类型的"),e("code",[t._v("subtype")]),t._v("），是类型系统的一个逃逸舱。")]),t._v(" "),e("p",[t._v("可以将在编程阶段还不清楚类型的变量指定为"),e("code",[t._v("any")]),t._v("类型。另外，"),e("code",[t._v("any")]),t._v("类型是与现有代码一起工作时的一种高效的方式。"),e("code",[t._v("any")]),t._v("类型也可以用于只知道一部分类型的情况，例如一个混合了各种类型的数据（"),e("code",[t._v("Array<any>")]),t._v("）。")]),t._v(" "),e("h3",{attrs:{id:"unknown类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unknown类型"}},[t._v("#")]),t._v(" Unknown类型")]),t._v(" "),e("p",[e("code",[t._v("TypeScript")]),t._v("3.0引入的另一种顶级类型。与"),e("code",[t._v("any")]),t._v("相比，"),e("code",[t._v("unknown")]),t._v("是类型安全的。任何值都可以赋给"),e("code",[t._v("unknown")]),t._v("类型，但是"),e("code",[t._v("unknown")]),t._v("类型在被类型断言或者基于控制流的类型细化之前，不能赋值给除了"),e("code",[t._v("any")]),t._v("类型和"),e("code",[t._v("unknown")]),t._v("类型本身以外的类型。")]),t._v(" "),e("h3",{attrs:{id:"void类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#void类型"}},[t._v("#")]),t._v(" Void类型")]),t._v(" "),e("p",[e("code",[t._v("void")]),t._v("类型与"),e("code",[t._v("any")]),t._v("类型相反，表示没有任何类型。当一个函数没有返回值时，其返回值类型是"),e("code",[t._v("void")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("void")]),t._v("类型只能被赋值为"),e("code",[t._v("undefined")]),t._v("和"),e("code",[t._v("null")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"never类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#never类型"}},[t._v("#")]),t._v(" Never类型")]),t._v(" "),e("p",[e("code",[t._v("never")]),t._v("用于表示永远不会存在的值的类型。"),e("code",[t._v("never")]),t._v("是任何类型的子类型，但没有类型是"),e("code",[t._v("never")]),t._v("的子类型。")]),t._v(" "),e("p",[e("code",[t._v("never")]),t._v("类型常用于以下情况：")]),t._v(" "),e("ol",[e("li",[t._v("用于描述从不会有返回值的函数或箭头函数")]),t._v(" "),e("li",[t._v("用于描述总是抛出错误的函数")]),t._v(" "),e("li",[t._v("当变量被永不为真的类型保护所约束时")])]),t._v(" "),e("h3",{attrs:{id:"object类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object类型"}},[t._v("#")]),t._v(" Object类型")]),t._v(" "),e("p",[e("code",[t._v("object")]),t._v("表示非原始类型，即除"),e("code",[t._v("number")]),t._v("，"),e("code",[t._v("string")]),t._v("，"),e("code",[t._v("boolean")]),t._v("，"),e("code",[t._v("symbol")]),t._v("，"),e("code",[t._v("null")]),t._v("或"),e("code",[t._v("undefined")]),t._v("之外的类型。与"),e("code",[t._v("any")]),t._v("类似，可以在编译时可选择地包含或移除类型检查。但是"),e("code",[t._v("object")]),t._v("类型只允许被赋值为任意类型，但是不能够调用任意方法，即使它真的有这些方法。")]),t._v(" "),e("div",{staticClass:"language-ts line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" notSure"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnotSure"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ifItExists")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// okay, ifItExists might exist at runtime")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prettySure"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Object "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nprettySure"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toFixed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error: Property 'toFixed' doesn't exist on type 'Object'.")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h2",{attrs:{id:"typescript的编译原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript的编译原理"}},[t._v("#")]),t._v(" TypeScript的编译原理")]),t._v(" "),e("p",[e("code",[t._v("TypeScript")]),t._v("编译器由以下几个部分组成：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Scanner")]),t._v("扫描器")]),t._v(" "),e("li",[e("code",[t._v("Parser")]),t._v("解析器")]),t._v(" "),e("li",[e("code",[t._v("Binder")]),t._v("绑定器")]),t._v(" "),e("li",[e("code",[t._v("Checker")]),t._v("检查器")]),t._v(" "),e("li",[e("code",[t._v("Emitter")]),t._v("发射器")])])])}),[],!1,null,null,null);e.default=_.exports}}]);